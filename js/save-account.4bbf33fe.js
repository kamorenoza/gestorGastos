'use strict'; (self.webpackChunkgestor_gastos = self.webpackChunkgestor_gastos || []).push([[454], { 8701: function (t, e, o) { o.r(e), o.d(e, { default: function () { return b } }); const i = function () { const t = this; const e = t.$createElement; const o = t._self._c || e; return o('div', { staticClass: 'l-content' }, [o('title-general', { attrs: { title: t.title, backRoute: '/accounts' } }), o('div', { staticClass: 'l-list' }, [o('input-general', { attrs: { label: 'Nombre', validate: t.validate }, model: { value: t.name, callback: function (e) { t.name = e }, expression: 'name' } }), o('icon-modal', { model: { value: t.icon, callback: function (e) { t.icon = e }, expression: 'icon' } }), o('icon-detail', { attrs: { icon: t.icon, iconColor: t.iconColor, validate: t.validate } }), t.icon ? o('color-modal', { attrs: { idModal: 'color-modal' }, model: { value: t.iconColor, callback: function (e) { t.iconColor = e }, expression: 'iconColor' } }) : t._e(), o('div', [o('button', { staticClass: 'btn button-color-general btn-block', on: { click: function (e) { return t.save() } } }, [t._v('Guardar')])])], 1)], 1) }; const n = []; const a = o(9677); const c = o(1160); const s = o(4665); const l = o(5099); const r = o(4511); const u = o(3727); const d = o(1654); const h = o(4998); const m = o(761); const p = { name: 'SaveAccount', components: { TitleGeneral: l.Z, InputGeneral: u.Z, IconModal: d.Z, ColorModal: h.Z, IconDetail: m.Z }, data () { return { name: '', icon: '', iconColor: '', validate: !1, id: '', expenses: [], uc: new a.Z() } }, watch: { icon () { this.iconColor || (this.iconColor = '#000000') } }, computed: { validData () { return this.icon.trim() !== '' && this.name.trim() !== '' }, title () { return this.id ? 'Editar presupuesto' : 'Nuevo presupuesto' }, ...(0, s.rn)('accountsStore', ['accountSelected']), ...(0, s.rn)('expensesStore', ['currentPeriod']) }, methods: { clear (t) { !t && this.id || (this.name = this.iconColor = this.icon = this.id = '', this.expenses = []), this.validate = !1 }, async save () { if (this.validate = !0, this.validData) { r.P.startLoading(); const t = await this.uc.saveAccount(this.name, this.icon, this.iconColor, this.id, this.expenses); await this.setAccounts(await this.uc.getAccounts()), this.clear(), r.P.stopLoading(), await (new c.Z()).notify(t), this.$router.push('/') } }, loadData () { this.accountSelected !== null && (this.name = this.accountSelected.getName(), this.icon = this.accountSelected?.getIcon(), this.iconColor = this.accountSelected.getColor(), this.id = this.accountSelected.getId(), this.expenses = this.accountSelected.getExpenses(this.currentPeriod)) }, ...(0, s.OI)('accountsStore', ['setAccounts']) }, created () { this.loadData() }, beforeDestroy () { this.clear(!0) } }; const v = p; const C = o(1001); const g = (0, C.Z)(v, i, n, !1, null, null, null); var b = g.exports } }])
// # sourceMappingURL=save-account.4bbf33fe.js.map
