'use strict'; (self.webpackChunkgestor_gastos = self.webpackChunkgestor_gastos || []).push([[734], { 4559: function (t, e, s) { s.d(e, { Z: function () { return T } }); const i = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return t.account ? s('div', { staticClass: 'l-list px-3' }, [s('accounts-summary', { staticClass: 'mb-2', attrs: { total: t.account.getTotal(t.currentPeriod).total, balance: t.account.getBalance() } }), s('summary-expenses', { attrs: { nameValue1: 'Pagados', value1: t.paid, nameValue2: 'Vencidos', value2: t.expired, nameValue3: 'Pendientes', value3: t.pending } }), t.expensesByDate.length > 0 ? s('div', t._l(t.expensesByDate, function (e, i) { return s('div', { key: i, staticClass: 'mt-4' }, [s('p', { staticClass: 'text-sm text-book mb-3' }, [t._v(' ' + t._s(t._f('formatDateDayWeek')(e.date)) + ' ')]), t._l(e.expenses, function (e) { return s('expense-row', { key: e.id, attrs: { expense: e, calculatePaids: t.calculatePaids } }) })], 2) }), 0) : t._e()], 1) : t._e() }; const a = []; const n = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return s('div', { staticClass: 'summary d-flex align-items-center' }, [s('div', { staticClass: 'd-flex align-items-center w-50' }, [s('b-icon', { staticClass: 'mx-2', attrs: { 'font-scale': 1.4, icon: 'piggy-bank' } }), s('div', [s('p', { staticClass: 'gray-xs-text' }, [t._v('Saldo actual')]), s('p', { staticClass: 'text-book text-big', class: t.classTotal }, [t._v('$ ' + t._s(t._f('formatNumber')(t.total)))])])], 1), s('div', { staticClass: 'd-flex align-items-center border-left w-50 pl-2' }, [s('b-icon', { staticClass: 'mx-2', attrs: { 'font-scale': 1.3, icon: 'coin' } }), s('div', [s('p', { staticClass: 'gray-xs-text' }, [t._v(' Balance total')]), s('p', { staticClass: 'text-book text-big' }, [t._v('$ ' + t._s(t._f('formatNumber')(t.balance)))])])], 1)]) }; const r = []; const o = { name: 'AccountsSummary', props: { total: { type: Number, default: 0 }, balance: { type: Number, default: 0 } }, computed: { classTotal () { return this.total === 0 ? '' : this.total < 0 ? 'text-danger' : 'text-success' } } }; const c = o; const l = s(1001); const d = (0, l.Z)(c, n, r, !1, null, null, null); const u = d.exports; const p = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return s('div', { staticClass: 'mb-3 pb-1' }, [s('div', { staticClass: 'd-flex align-items-center justify-content-between' }, [s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'text-center' }, [s('div', { staticClass: 'icon-category icon-category--small mr-2', style: { backgroundColor: t.category.backgroundColor } }, [s('b-icon', { style: { color: t.category.iconColor }, attrs: { icon: t.category.icon } })], 1)]), s('div', { on: { click: function (e) { return t.openDetailModal(t.expense.id) } } }, [s('p', { staticClass: 'text-capitalize mb3' }, [t._v(' ' + t._s(t.expense.description) + ' ')])])]), s('div', { staticClass: 'text-right d-flex align-items-center justify-content-between' }, [s('p', { staticClass: 'text-book text-medium pr-2', class: t.classAmount }, [t._v('$ ' + t._s(t._f('formatNumber')(t.amount)) + ' ')]), s('div', { staticClass: 'd-flex align-items-center justify-content-between' }, [s('div', { staticClass: 'action mr-2' }, [s('button', { staticClass: 'button-action', class: t.classPaid, attrs: { disabled: t.disabled }, on: { click: function (e) { return t.changePaid() } } }, [s('b-icon', { attrs: { icon: t.paidIcon } })], 1)]), s('div', [s('b-dropdown', { attrs: { size: 'sm', variant: 'link', dropleft: '', 'toggle-class': 'text-decoration-none p-0 text-dark', 'no-caret': '' }, scopedSlots: t._u([{ key: 'button-content', fn: function () { return [s('b-icon', { attrs: { icon: 'three-dots-vertical' } })] }, proxy: !0 }]) }, [s('b-dropdown-item', { staticClass: 'text-medium mb-2', on: { click: function (e) { return t.editExpe() } } }, [t._v('Editar')]), s('b-dropdown-item', { staticClass: 'text-medium mb-2', on: { click: function (e) { return t.deleteExpense() } } }, [t._v('Eliminar')]), s('b-dropdown-item', { staticClass: 'text-medium', on: { click: function (e) { return t.openDetailModal(t.expense.id) } } }, [t._v('Detalles')])], 1)], 1)])])]), s('detail-expense-modal', { attrs: { expense: t.expense, id: t.expense.id, date: t.dateExpense, amount: t.amount, type: t.infoExpense, paid: t.paidText } })], 1) }; const m = []; const x = s(4511); const h = s(4665); const b = s(7133); const g = s.n(b); const y = s(1160); const f = s(6412); const v = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return s('b-modal', { attrs: { id: t.idModal, centered: '', 'hide-header': '', 'hide-footer': '' } }, [s('div', { staticClass: 'text-center mb-3' }, [s('p', { staticClass: 'text-book' }, [t._v(t._s(t.expense.description))])]), s('div', { staticClass: 'd-flex align-items-center mb-2 border-bottom pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Fecha')]), s('p', { staticClass: 'text-sm gray-text' }, [t._v(t._s(t._f('formatAllDate')(t.date)))])]), s('div', { staticClass: 'd-flex align-items-center mb-2 border-bottom pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Tipo')]), s('p', { staticClass: 'text-sm gray-text' }, [t._v(t._s(t.type))])]), s('div', { staticClass: 'd-flex align-items-center mb-2 border-bottom pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Valor')]), s('p', { staticClass: 'text-sm gray-text' }, [t._v('$ ' + t._s(t._f('formatNumber')(t.amount)))])]), s('div', { staticClass: 'd-flex align-items-center mb-2 border-bottom pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Categoria')]), s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'icon-category icon-category--small mr-2', style: { backgroundColor: t.category.backgroundColor } }, [s('b-icon', { style: { color: t.category.iconColor }, attrs: { icon: t.category.icon } })], 1), s('p', { staticClass: 'text-sm gray-text' }, [t._v(t._s(t.category.detail))])])]), s('div', { staticClass: 'd-flex align-items-center mb-2 border-bottom pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Cuenta')]), t.expense.product ? s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'icon-category icon-category--small mr-2' }, [s('b-icon', { style: { color: t.expense.product.color }, attrs: { icon: t.expense.product.icon } })], 1), s('p', { staticClass: 'text-sm gray-text' }, [t._v(t._s(t.expense.product.name))])]) : s('p', { staticClass: 'text-sm gray-text' }, [t._v('Ninguna asociada')])]), s('div', { staticClass: 'd-flex align-items-center mb-2 pb-2' }, [s('p', { staticClass: 'modal-subtitle text-book text-sm' }, [t._v('Estado pago')]), s('p', { staticClass: 'text-sm gray-text' }, [t._v(t._s(t.paid))])]), s('div', { staticClass: 'text-center mt-4' }, [s('button', { staticClass: 'btn button-white btn-sm ml-1 w-50', on: { click: function (e) { return t.close() } } }, [t._v('Cerrar')])])]) }; const C = []; const P = { props: { expense: { type: Object }, id: { type: [String, Number] }, date: { type: [String, Number] }, amount: { type: [String, Number] }, type: { type: [String, Number] }, paid: { type: [String, Number, Boolean] } }, computed: { category () { return this.expense.category }, idModal () { return `id${this.id}` } }, methods: { close () { this.$bvModal.hide(this.idModal) } } }; const _ = P; const E = (0, l.Z)(_, v, C, !1, null, null, null); const k = E.exports; const w = new f.Z(); const S = { components: { DetailExpenseModal: k }, name: 'ExpenseRow', props: { expense: { type: Object, required: !0 }, calculatePaids: { type: Function } }, data () { return { indexPayment: 0, paid: !1, amount: 0, disabled: !1 } }, watch: { currentPeriod () { this.initAction() }, editExpense () { this.initAction() } }, computed: { classAmount () { return this.expense.type === 'credit' ? 'text-danger' : 'text-success' }, dateExpense () { return this.expense.repeat ? this.indexPayment !== -1 ? this.expense.payments[this.indexPayment].date : 0 : this.expense.fixed ? x.P.getFixedExpenseDate(this.expense.date, x.P.getFirstDay(this.currentPeriod)) : this.expense.date }, infoExpense () { const t = this.expense.type === 'credit' ? 'Gasto' : 'Ingreso'; if (this.expense.repeat) { const e = x.P.sumMonths(this.expense.date, this.expense.repeatTimes); return `${t} hasta ${x.P.formatAllDate(e)}` } return this.expense.fixed ? `${t} fijo` : t }, paidIcon () { return this.paid ? 'check2-circle' : g()(this.dateExpense).isBefore(x.P.getCurrentDate()) ? 'exclamation' : 'clock-history' }, classPaid () { return this.paid ? 'button-action--success' : g()(this.dateExpense).isBefore(x.P.getCurrentDate()) ? 'button-action--warning' : '' }, paidText () { return this.paid ? 'Pagado' : g()(this.dateExpense).isBefore(x.P.getCurrentDate()) ? 'Vencido' : 'Pendiente' }, paidTextClass () { return this.paid ? 'text-success' : g()(this.dateExpense).isBefore(x.P.getCurrentDate()) ? 'text-warn' : '' }, category () { return this.expense.category }, ...(0, h.rn)('expensesStore', ['currentPeriod', 'editExpense']), ...(0, h.rn)('productsStore', ['products']) }, methods: { getPaymentIndex () { const t = x.P.getFirstDay(this.currentPeriod); const e = x.P.getLastDay(this.currentPeriod); this.indexPayment = this.expense.payments.findIndex(s => g()(s.date).isBetween(t, e, void 0, '[]')) }, setPaid () { this.expense.repeat || this.expense.fixed ? this.indexPayment !== -1 ? this.paid = this.expense.payments[this.indexPayment].paid : this.paid = !1 : this.paid = this.expense.paid }, setAmount () { this.expense.repeat ? (this.indexPayment !== -1 ? this.amount = this.expense.payments[this.indexPayment].amount : this.amount = this.expense.amount, this.expense.editList.length > 0 && this.expense.editList.forEach(t => { g()(x.P.getFirstDay(t.date)).isSameOrBefore(x.P.getFirstDay(this.currentPeriod)) && (this.amount = t.amount) })) : this.expense.fixed ? (this.amount = this.indexPayment !== -1 ? this.expense.payments[this.indexPayment].amount : this.expense.amount, this.expense.editList.length > 0 && this.expense.editList.forEach(t => { g()(x.P.getFirstDay(t.date)).isSameOrBefore(x.P.getFirstDay(this.currentPeriod)) && (this.amount = t.amount) })) : this.amount = this.expense.amount }, async changePaid () { const t = this.expense.type === 'credit' ? 'gasto' : 'ingreso'; const e = this.paid ? 'NO PAGADO' : 'PAGADO'; const s = await (new y.Z()).confirm(`Se marcará el ${t} como ${e}`); s.isConfirmed && (this.disabled = !0, this.paid ? this.paid = !1 : this.paid = x.P.getCurrentDate(), await w.paidExpense(this.expense, this.indexPayment, this.paid, this.products), this.initAction(), this.disabled = !1) }, async deleteExpense () { if (this.expense.fixed) this.deleteFixed(); else { const t = this.expense.type === 'credit' ? 'gasto' : 'ingreso'; const e = `Esta acción es IRREVERSIBLE, se eliminará todo el ${t} y cualquier registro de él ¿Está seguro de realizarla?`; const s = await (new y.Z()).confirm(e); s.isConfirmed && await this.deleteAll(!0) } }, async deleteFixed () { const t = 'Esta acción es IRREVERSIBLE, ¿Está seguro de realizarla?, Por favor seleccione cuales desea eliminar: '; const e = await (new y.Z()).selectOption('Todos', 'Los próximos', t); (e.isConfirmed || e.isDenied) && await this.deleteAll(e.isConfirmed) }, async deleteAll (t) { x.P.startLoading(); try { await w.deleteExpense(this.expense, t), x.P.stopLoading() } catch (e) { (new y.Z()).notify('Ocurrió un error!'), x.P.stopLoading() } }, editExpe () { this.setExpenseSelected(this.expense), this.setIndexPaymentSelected(this.indexPayment), this.$router.push('/add-expense') }, initAction () { (this.expense.repeat || this.expense.fixed) && this.getPaymentIndex(), this.setPaid(), this.setAmount(), this.calculatePaids(this.paidText) }, openDetailModal (t) { const e = `id${t}`; this.$bvModal.show(e) }, ...(0, h.OI)('expensesStore', ['setExpenseSelected', 'setIndexPaymentSelected']) }, created () { this.initAction() } }; const D = S; const A = (0, l.Z)(D, p, m, !1, null, null, null); const $ = A.exports; const N = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return s('div', { staticClass: 'summary d-flex align-items-center justify-content-between px-2' }, [s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'action action--sm mr-2' }, [s('button', { staticClass: 'button-action button-action--success', attrs: { disabled: '' } }, [s('b-icon', { attrs: { icon: 'check2-circle' } })], 1)]), s('div', { staticClass: 'd-flex align-items-center' }, [s('p', { staticClass: 'gray-xs-text mr-1' }, [t._v(t._s(t.nameValue1))]), s('p', { staticClass: 'text-book text-medium' }, [t._v(t._s(t.value1))])])]), s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'action action--sm mr-2' }, [s('button', { staticClass: 'button-action button-action--danger', attrs: { disabled: '' } }, [s('b-icon', { attrs: { icon: 'clock-history' } })], 1)]), s('div', { staticClass: 'd-flex align-items-center' }, [s('p', { staticClass: 'gray-xs-text mr-1' }, [t._v(t._s(t.nameValue3))]), s('p', { staticClass: 'text-book text-medium' }, [t._v(t._s(t.value3))])])]), s('div', { staticClass: 'd-flex align-items-center' }, [s('div', { staticClass: 'action action--sm mr-2' }, [s('button', { staticClass: 'button-action button-action--warning', attrs: { disabled: '' } }, [s('b-icon', { attrs: { icon: 'exclamation' } })], 1)]), s('div', { staticClass: 'd-flex align-items-center' }, [s('p', { staticClass: 'gray-xs-text mr-1' }, [t._v(t._s(t.nameValue2))]), s('p', { staticClass: 'text-book text-medium' }, [t._v(t._s(t.value2))])])])]) }; const B = []; const V = { props: { nameValue1: { type: String, default: '' }, nameValue2: { type: String, default: '' }, nameValue3: { type: String, default: '' }, value1: { type: [String, Number], default: '' }, value2: { type: [String, Number], default: '' }, value3: { type: [String, Number], default: '' } } }; const F = V; const I = (0, l.Z)(F, N, B, !1, null, null, null); const M = I.exports; const Z = { components: { ExpenseRow: $, AccountsSummary: u, SummaryExpenses: M }, name: 'ExpensesPerAccount', props: { account: { type: Object } }, data () { return { paid: 0, expired: 0, pending: 0 } }, watch: { currentPeriod () { this.paid = this.expired = this.pending = 0 } }, computed: { expensesByDate () { let t = []; const e = []; let s = ''; const i = this.account.getExpenses(this.currentPeriod); return i.forEach((i, a) => { a === 0 && (s = x.P.getFixedExpenseDate(i.date, this.currentPeriod)), g()(x.P.getFixedExpenseDate(i.date, this.currentPeriod)).isSame(s) || (e.push({ date: s, expenses: t }), s = x.P.getFixedExpenseDate(i.date, this.currentPeriod), t = []), t.push(i) }), e.push({ date: s, expenses: t }), i.length > 0 ? e : [] }, ...(0, h.rn)('expensesStore', ['currentPeriod']) }, methods: { calculatePaids (t) { t === 'Vencido' && (this.expired += 1), t === 'Pagado' && (this.paid += 1), t === 'Pendiente' && (this.pending += 1) } } }; const O = Z; const L = (0, l.Z)(O, i, a, !1, null, null, null); var T = L.exports }, 6312: function (t, e, s) { s.d(e, { Z: function () { return u } }); const i = function () { const t = this; const e = t.$createElement; const s = t._self._c || e; return s('div', { staticClass: 'm-select-period' }, [s('b-icon', { attrs: { icon: 'chevron-left' }, on: { click: function (e) { return t.changePeriod() } } }), s('div', { staticClass: 'm-select-period__calendar' }, [s('b-form-datepicker', { attrs: { id: 'datepicker-2', locale: 'es', 'button-only': '', 'today-button': '', 'label-today-button': 'Seleccionar hoy' }, model: { value: t.date, callback: function (e) { t.date = e }, expression: 'date' } }), s('p', [t._v(t._s(t._f('formatDateMonthYear')(t.currentPeriod)) + ' ')])], 1), s('b-icon', { attrs: { icon: 'chevron-right' }, on: { click: function (e) { return t.changePeriod(!0) } } })], 1) }; const a = []; const n = s(4511); const r = s(4665); const o = { name: 'SelectPeriod', data () { return { date: this.currentPeriod } }, watch: { date (t) { t !== this.currentPeriod && this.setCurrentPeriod(t) }, currentPeriod (t) { t !== this.date && (this.date = t) } }, computed: { ...(0, r.rn)('expensesStore', ['currentPeriod']) }, methods: { changePeriod (t) { t ? this.setCurrentPeriod(n.P.sumMonths(this.currentPeriod, 1)) : this.setCurrentPeriod(n.P.subtractMonths(this.currentPeriod, 1)) }, ...(0, r.OI)('expensesStore', ['setCurrentPeriod']) } }; const c = o; const l = s(1001); const d = (0, l.Z)(c, i, a, !1, null, null, null); var u = d.exports } }])
// # sourceMappingURL=734.b0a3bb4d.js.map
